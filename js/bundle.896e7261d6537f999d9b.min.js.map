{"version":3,"file":"js/bundle.896e7261d6537f999d9b.min.js","mappings":"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","sources":["webpack:///./assets/scss/ConsoleWindow.scss?3171","webpack:///../node_modules/@arwes/text/build/esm/internal/walkTextNodes/walkTextNodes.js","webpack:///../node_modules/@arwes/text/build/esm/internal/setTextNodesContent/setTextNodesContent.js","webpack:///../node_modules/@arwes/text/build/esm/transitionTextSequence/transitionTextSequence.js","webpack:///../node_modules/@arwes/text/build/esm/transitionTextDecipher/transitionTextDecipher.js","webpack:///../node_modules/@arwes/text/build/esm/getTransitionTextDuration/getTransitionTextDuration.js","webpack:///../node_modules/@arwes/react-text/build/esm/Text/Text.js","webpack:///../node_modules/@arwes/react-text/build/esm/Text/index.js","webpack:///./components/ConsoleWindow.tsx","webpack:///./assets/scss/ConsoleWindow.scss"],"sourcesContent":["\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./ConsoleWindow.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./ConsoleWindow.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","const walkTextNodes = (node, callback) => {\n    Array.from(node.childNodes).forEach(child => {\n        if (child.nodeType === Node.TEXT_NODE) {\n            callback(child);\n        }\n        else if (child.nodeType === Node.ELEMENT_NODE) {\n            walkTextNodes(child, callback);\n        }\n    });\n};\nexport { walkTextNodes };\n","const setTextNodesContent = (textNodes, texts, contentLength) => {\n    let markerLength = 0;\n    for (let index = 0; index < textNodes.length; index++) {\n        const textNode = textNodes[index];\n        const text = texts[index];\n        const newMarkerLength = markerLength + text.length;\n        if (newMarkerLength <= contentLength) {\n            if (textNode.textContent !== text) {\n                textNode.textContent = text;\n            }\n        }\n        else if (markerLength <= contentLength) {\n            const currentTextNodeLengthPortion = contentLength - markerLength;\n            const currentTextNodeText = text.substring(0, currentTextNodeLengthPortion);\n            if (textNode.textContent !== currentTextNodeText) {\n                textNode.textContent = currentTextNodeText;\n            }\n        }\n        else {\n            if (textNode.textContent !== '') {\n                textNode.textContent = '';\n            }\n        }\n        markerLength = newMarkerLength;\n    }\n};\nexport { setTextNodesContent };\n","import { animate } from 'motion';\nimport { createAnimation } from '@arwes/animated';\nimport { walkTextNodes } from \"../internal/walkTextNodes/index.js\";\nimport { setTextNodesContent } from \"../internal/setTextNodesContent/index.js\";\nconst transitionTextSequence = (props) => {\n    const { rootElement, contentElement, duration, easing = 'linear', isEntering = true, hideOnExited = true, hideOnEntered } = props;\n    // If no valid elements are provided, return an void animation for type safety.\n    if (!rootElement || !contentElement) {\n        return {\n            isPending: () => false,\n            cancel: () => { }\n        };\n    }\n    const cloneElement = contentElement.cloneNode(true);\n    Object.assign(cloneElement.style, {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        visibility: 'visible',\n        opacity: 1\n    });\n    const blinkElement = document.createElement('span');\n    blinkElement.classList.add('arwes-text__blink');\n    blinkElement.innerHTML = '&#9614;';\n    Object.assign(blinkElement.style, {\n        position: 'relative',\n        display: 'inline-block',\n        width: 0,\n        height: 0,\n        lineHeight: '0',\n        color: 'inherit'\n    });\n    const textNodes = [];\n    const texts = [];\n    walkTextNodes(cloneElement, child => {\n        textNodes.push(child);\n        texts.push(child.textContent || '');\n        if (isEntering) {\n            child.textContent = '';\n        }\n    });\n    const length = texts.join('').length;\n    rootElement.appendChild(cloneElement);\n    cloneElement.appendChild(blinkElement);\n    contentElement.style.visibility = 'hidden';\n    const blinkAnimation = animate(blinkElement, { color: ['transparent', 'inherit', 'transparent'] }, { duration: 0.1, easing: 'steps(2, end)', repeat: Infinity });\n    return createAnimation({\n        duration,\n        easing,\n        direction: isEntering ? 'normal' : 'reverse',\n        onUpdate: progress => {\n            const newLength = Math.round(progress * length);\n            setTextNodesContent(textNodes, texts, newLength);\n        },\n        onComplete: () => {\n            contentElement.style.visibility = (isEntering && hideOnEntered) || (!isEntering && hideOnExited)\n                ? 'hidden'\n                : 'visible';\n            cloneElement.remove();\n            blinkAnimation.cancel();\n        },\n        onCancel: () => {\n            contentElement.style.visibility = '';\n            cloneElement.remove();\n            blinkAnimation.cancel();\n        }\n    });\n};\nexport { transitionTextSequence };\n","import { randomizeList } from '@arwes/tools';\nimport { createAnimation } from '@arwes/animated';\nimport { walkTextNodes } from \"../internal/walkTextNodes/index.js\";\nimport { setTextNodesContent } from \"../internal/setTextNodesContent/index.js\";\nconst LETTERS = 'abcdefghijklmnñopqrstuvwxyzABCDEFGHIJKLMNÑOPQRSTUVWXYZ>!·$%&/()=?¿≤|@#';\nconst transitionTextDecipher = (props) => {\n    const { rootElement, contentElement, duration, easing = 'linear', isEntering = true, hideOnExited = true, hideOnEntered } = props;\n    // If no valid elements are provided, return an void animation for type safety.\n    if (!rootElement || !contentElement) {\n        return {\n            isPending: () => false,\n            cancel: () => { }\n        };\n    }\n    const cloneElement = contentElement.cloneNode(true);\n    Object.assign(cloneElement.style, {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        visibility: 'visible',\n        opacity: 1\n    });\n    const textNodes = [];\n    const textsReal = [];\n    walkTextNodes(cloneElement, child => {\n        textNodes.push(child);\n        textsReal.push(child.textContent || '');\n    });\n    const length = textsReal.join('').length;\n    // A list of all the characters indexes in random positions.\n    const indexes = randomizeList(Array(length).fill(null).map((_, i) => i));\n    // A record of all characters indexes with `true` to know if their character\n    // is now deciphered/visible.\n    const deciphered = {};\n    rootElement.appendChild(cloneElement);\n    contentElement.style.visibility = 'hidden';\n    return createAnimation({\n        duration,\n        easing,\n        direction: isEntering ? 'normal' : 'reverse',\n        onUpdate: progress => {\n            // When entering, the animation decipher characters over time.\n            // When exiting, the animation will cipher characters over time.\n            const newPositionsLength = Math.round(length * progress);\n            for (let index = 0; index < length; index++) {\n                deciphered[indexes[index]] = index < newPositionsLength;\n            }\n            const textsCurrent = textsReal.map(text => text\n                .split('')\n                .map((char, index) => {\n                if (char === ' ')\n                    return ' ';\n                if (deciphered[index])\n                    return char;\n                return LETTERS[Math.round(Math.random() * (LETTERS.length - 1))];\n            })\n                .join(''));\n            setTextNodesContent(textNodes, textsCurrent, length);\n        },\n        onComplete: () => {\n            contentElement.style.visibility = (isEntering && hideOnEntered) || (!isEntering && hideOnExited)\n                ? 'hidden'\n                : 'visible';\n            cloneElement.remove();\n        },\n        onCancel: () => {\n            contentElement.style.visibility = '';\n            cloneElement.remove();\n        }\n    });\n};\nexport { transitionTextDecipher };\n","const getTransitionTextDuration = (props) => {\n    const { length, maxDuration = 4, cps = 400 } = props;\n    // The time it will take to add/remove a character per frame multiplied by\n    // the total characters length.\n    const realDuration = ((1000 / cps) * length) / 1000;\n    return Math.min(realDuration, maxDuration);\n};\nexport { getTransitionTextDuration };\n","import { useMemo, useState, useRef, useEffect } from 'react';\nimport { jsx } from '@emotion/react';\nimport { cx } from '@arwes/tools';\nimport { mergeRefs } from '@arwes/react-tools';\nimport { ANIMATOR_STATES as STATES } from '@arwes/animator';\nimport { useAnimator } from '@arwes/react-animator';\nimport { getTransitionTextDuration, transitionTextSequence, transitionTextDecipher } from '@arwes/text';\nconst TEXT_CLASS = 'arwes-react-text-text';\nconst Text = (props) => {\n    const { as: asProvided = 'p', className, contentClassName, children, manager, easing, fixed, hideOnExited = true, hideOnEntered, elementRef: elementRefProvided, ...otherProps } = props;\n    const as = useMemo(() => asProvided, []);\n    const [childrenText, setChildrenText] = useState('');\n    const elementRef = useRef(null);\n    const contentElementRef = useRef(null);\n    const transitionControl = useRef(null);\n    const animator = useAnimator();\n    const [isExited, setIsExited] = useState(() => (animator === null || animator === void 0 ? void 0 : animator.node.state) === STATES.exited);\n    const [isEntered, setIsEntered] = useState(() => (animator === null || animator === void 0 ? void 0 : animator.node.state) === STATES.entered);\n    useEffect(() => {\n        var _a, _b;\n        setChildrenText((_b = (_a = contentElementRef.current) === null || _a === void 0 ? void 0 : _a.textContent) !== null && _b !== void 0 ? _b : '');\n    }, [children]);\n    useEffect(() => {\n        if (!animator) {\n            if (contentElementRef.current) {\n                contentElementRef.current.style.visibility = 'visible';\n            }\n            return;\n        }\n        // If there is no text, there is nothing to animate.\n        if (!childrenText.length) {\n            return;\n        }\n        if (!fixed) {\n            const settings = animator.node.control.getSettings();\n            const durationEnter = getTransitionTextDuration({\n                length: childrenText.length,\n                maxDuration: settings.duration.enter\n            });\n            const durationExit = getTransitionTextDuration({\n                length: childrenText.length,\n                maxDuration: settings.duration.exit\n            });\n            animator.node.control.setDynamicSettings({\n                duration: { enter: durationEnter, exit: durationExit }\n            });\n        }\n        const transitioner = manager === 'decipher'\n            ? transitionTextDecipher\n            : transitionTextSequence;\n        const transition = (duration, isEntering) => {\n            var _a;\n            (_a = transitionControl.current) === null || _a === void 0 ? void 0 : _a.cancel();\n            transitionControl.current = transitioner({\n                rootElement: elementRef.current,\n                contentElement: contentElementRef.current,\n                duration,\n                isEntering,\n                easing,\n                hideOnExited,\n                hideOnEntered\n            });\n        };\n        const cancelSubscription = animator.node.subscribe(node => {\n            setIsEntered(node.state === STATES.entered);\n            setIsExited(node.state === STATES.exited);\n            switch (node.state) {\n                case 'entered': {\n                    if (!transitionControl.current) {\n                        transition(node.duration.enter, true);\n                    }\n                    break;\n                }\n                case 'entering': {\n                    transition(node.duration.enter, true);\n                    break;\n                }\n                case 'exiting': {\n                    transition(node.duration.exit, false);\n                    break;\n                }\n            }\n        });\n        return () => {\n            var _a;\n            cancelSubscription();\n            (_a = transitionControl.current) === null || _a === void 0 ? void 0 : _a.cancel();\n            transitionControl.current = null;\n        };\n    }, [animator, childrenText]);\n    return jsx(as, {\n        ...otherProps,\n        className: cx(TEXT_CLASS, className),\n        css: {\n            position: 'relative'\n        },\n        ref: mergeRefs(elementRefProvided, elementRef)\n    }, jsx('span', {\n        ref: contentElementRef,\n        className: cx(`${TEXT_CLASS}__content`, contentClassName),\n        css: {\n            position: 'relative',\n            zIndex: 1,\n            display: 'inline-block',\n            visibility: animator && ((hideOnEntered && isEntered) || (hideOnExited && isExited)) ? 'hidden' : 'visible'\n        }\n    }, children));\n};\nexport { TEXT_CLASS, Text };\n","import { memo } from '@arwes/react-tools';\nimport { Text as Component } from \"./Text.js\";\nconst Text = memo(Component);\nexport * from \"./Text.js\";\nexport { Text };\n","import React, { useState, useEffect } from 'react';\r\nimport './../assets/scss/ConsoleWindow.scss';\r\nimport { Text } from '@arwes/react-text';\r\nimport { Animator } from '@arwes/react-animator';\r\nimport { Animated } from '@arwes/react-animated';\r\nimport { FrameSVGAssemblingAnimation } from '@arwes/react-frames';\r\n\r\ntype ConsoleProps = {\r\n    messages: string[];\r\n};\r\n\r\nconst ConsoleWindow: React.FC<ConsoleProps> = ({ messages }) => {\r\n    return (\r\n        <div className=\"consoleWindow\">\r\n            {messages.map((message, index) => (\r\n                <div key={index} className=\"consoleMessage\">\r\n                        <Text style={{ color: '#ddd', fontFamily: 'monospace' }}>\r\n                            {message}\r\n                        </Text>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConsoleWindow;","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".consoleWindow{font-family:\\\"Courier New\\\",monospace;background-color:#000;color:#32cd32;padding:20px;border-radius:5px;height:30em}.consoleWindow .consoleMessage{margin-bottom:5px}\", \"\",{\"version\":3,\"sources\":[\"webpack://./assets/scss/ConsoleWindow.scss\"],\"names\":[],\"mappings\":\"AAAA,eACI,mCAAA,CACA,qBAAA,CACA,aAAA,CACA,YAAA,CACA,iBAAA,CACA,WAAA,CACA,+BACI,iBAAA\",\"sourcesContent\":[\".consoleWindow {\\r\\n    font-family: 'Courier New', monospace;\\r\\n    background-color: black;\\r\\n    color: limegreen;\\r\\n    padding: 20px;\\r\\n    border-radius: 5px;\\r\\n    height: 30em; \\r\\n    .consoleMessage {\\r\\n        margin-bottom: 5px;\\r\\n    }\\r\\n}\\r\\n  \"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","walkTextNodes","node","callback","Array","from","childNodes","forEach","child","nodeType","Node","TEXT_NODE","ELEMENT_NODE","setTextNodesContent","textNodes","texts","contentLength","markerLength","index","length","textNode","text","newMarkerLength","textContent","currentTextNodeLengthPortion","currentTextNodeText","substring","transitionTextSequence","props","rootElement","contentElement","duration","easing","isEntering","hideOnExited","hideOnEntered","isPending","cancel","cloneElement","cloneNode","Object","assign","style","position","left","right","top","bottom","visibility","opacity","blinkElement","document","createElement","classList","add","innerHTML","display","width","height","lineHeight","color","push","join","appendChild","blinkAnimation","repeat","Infinity","direction","onUpdate","progress","newLength","Math","round","onComplete","remove","onCancel","LETTERS","transitionTextDecipher","textsReal","indexes","fill","map","_","i","deciphered","newPositionsLength","textsCurrent","split","char","random","getTransitionTextDuration","maxDuration","cps","realDuration","min","TEXT_CLASS","as","asProvided","className","contentClassName","children","manager","fixed","elementRef","elementRefProvided","otherProps","useMemo","childrenText","setChildrenText","useState","useRef","contentElementRef","transitionControl","animator","isExited","setIsExited","state","isEntered","setIsEntered","useEffect","_a","_b","current","settings","control","getSettings","durationEnter","enter","durationExit","exit","setDynamicSettings","transitioner","transition","cancelSubscription","subscribe","cx","css","ref","zIndex","messages","message","key","fontFamily","___CSS_LOADER_EXPORT___","module","id"],"sourceRoot":""}